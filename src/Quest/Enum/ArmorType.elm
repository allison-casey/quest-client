-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quest.Enum.ArmorType exposing (ArmorType(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Clothing -
  - Light -
  - Medium -
  - Heavy -
  - Power -

-}
type ArmorType
    = Clothing
    | Light
    | Medium
    | Heavy
    | Power


list : List ArmorType
list =
    [ Clothing, Light, Medium, Heavy, Power ]


decoder : Decoder ArmorType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CLOTHING" ->
                        Decode.succeed Clothing

                    "LIGHT" ->
                        Decode.succeed Light

                    "MEDIUM" ->
                        Decode.succeed Medium

                    "HEAVY" ->
                        Decode.succeed Heavy

                    "POWER" ->
                        Decode.succeed Power

                    _ ->
                        Decode.fail ("Invalid ArmorType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ArmorType -> String
toString enum =
    case enum of
        Clothing ->
            "CLOTHING"

        Light ->
            "LIGHT"

        Medium ->
            "MEDIUM"

        Heavy ->
            "HEAVY"

        Power ->
            "POWER"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ArmorType
fromString enumString =
    case enumString of
        "CLOTHING" ->
            Just Clothing

        "LIGHT" ->
            Just Light

        "MEDIUM" ->
            Just Medium

        "HEAVY" ->
            Just Heavy

        "POWER" ->
            Just Power

        _ ->
            Nothing

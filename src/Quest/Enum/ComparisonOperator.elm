-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quest.Enum.ComparisonOperator exposing (ComparisonOperator(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Lt -
  - Le -
  - Eq -
  - Ge -
  - Gt -
  - Ne -

-}
type ComparisonOperator
    = Lt
    | Le
    | Eq
    | Ge
    | Gt
    | Ne


list : List ComparisonOperator
list =
    [ Lt, Le, Eq, Ge, Gt, Ne ]


decoder : Decoder ComparisonOperator
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "LT" ->
                        Decode.succeed Lt

                    "LE" ->
                        Decode.succeed Le

                    "EQ" ->
                        Decode.succeed Eq

                    "GE" ->
                        Decode.succeed Ge

                    "GT" ->
                        Decode.succeed Gt

                    "NE" ->
                        Decode.succeed Ne

                    _ ->
                        Decode.fail ("Invalid ComparisonOperator type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ComparisonOperator -> String
toString enum =
    case enum of
        Lt ->
            "LT"

        Le ->
            "LE"

        Eq ->
            "EQ"

        Ge ->
            "GE"

        Gt ->
            "GT"

        Ne ->
            "NE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ComparisonOperator
fromString enumString =
    case enumString of
        "LT" ->
            Just Lt

        "LE" ->
            Just Le

        "EQ" ->
            Just Eq

        "GE" ->
            Just Ge

        "GT" ->
            Just Gt

        "NE" ->
            Just Ne

        _ ->
            Nothing

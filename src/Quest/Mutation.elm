-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quest.Mutation exposing (AddArmorOptionalArguments, AddArmorsOptionalArguments, AddWeaponOptionalArguments, AddWeaponsOptionalArguments, DeleteArmorRequiredArguments, DeleteWeaponRequiredArguments, UpdateArmorOptionalArguments, UpdateArmorRequiredArguments, UpdateWeaponOptionalArguments, UpdateWeaponRequiredArguments, addArmor, addArmors, addWeapon, addWeapons, deleteAllArmors, deleteAllWeapons, deleteArmor, deleteWeapon, updateArmor, updateWeapon)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Quest.InputObject
import Quest.Interface
import Quest.Object
import Quest.Scalar
import Quest.ScalarCodecs
import Quest.Union


type alias AddArmorOptionalArguments =
    { attributes : OptionalArgument Quest.InputObject.ArmorAttributes }


{-|

  - attributes -

-}
addArmor : (AddArmorOptionalArguments -> AddArmorOptionalArguments) -> SelectionSet decodesTo Quest.Object.Armor -> SelectionSet (Maybe decodesTo) RootMutation
addArmor fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { attributes = Absent }

        optionalArgs =
            [ Argument.optional "attributes" filledInOptionals.attributes Quest.InputObject.encodeArmorAttributes ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "addArmor" optionalArgs object_ (identity >> Decode.nullable)


type alias AddArmorsOptionalArguments =
    { attributesList : OptionalArgument (List (Maybe Quest.InputObject.ArmorAttributes)) }


{-|

  - attributesList -

-}
addArmors : (AddArmorsOptionalArguments -> AddArmorsOptionalArguments) -> SelectionSet decodesTo Quest.Object.Armor -> SelectionSet (List decodesTo) RootMutation
addArmors fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { attributesList = Absent }

        optionalArgs =
            [ Argument.optional "attributesList" filledInOptionals.attributesList (Quest.InputObject.encodeArmorAttributes |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "addArmors" optionalArgs object_ (identity >> Decode.list)


type alias UpdateArmorOptionalArguments =
    { attributes : OptionalArgument Quest.InputObject.ArmorAttributes }


type alias UpdateArmorRequiredArguments =
    { id : Quest.ScalarCodecs.Id }


{-|

  - id -
  - attributes -

-}
updateArmor : (UpdateArmorOptionalArguments -> UpdateArmorOptionalArguments) -> UpdateArmorRequiredArguments -> SelectionSet decodesTo Quest.Object.Armor -> SelectionSet (Maybe decodesTo) RootMutation
updateArmor fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { attributes = Absent }

        optionalArgs =
            [ Argument.optional "attributes" filledInOptionals.attributes Quest.InputObject.encodeArmorAttributes ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateArmor" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Quest.ScalarCodecs.codecs |> Quest.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias DeleteArmorRequiredArguments =
    { id : Quest.ScalarCodecs.Id }


{-|

  - id -

-}
deleteArmor : DeleteArmorRequiredArguments -> SelectionSet decodesTo Quest.Object.Armor -> SelectionSet (Maybe decodesTo) RootMutation
deleteArmor requiredArgs object_ =
    Object.selectionForCompositeField "deleteArmor" [ Argument.required "id" requiredArgs.id (Quest.ScalarCodecs.codecs |> Quest.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


{-| -}
deleteAllArmors : SelectionSet (Maybe Int) RootMutation
deleteAllArmors =
    Object.selectionForField "(Maybe Int)" "deleteAllArmors" [] (Decode.int |> Decode.nullable)


type alias AddWeaponOptionalArguments =
    { attributes : OptionalArgument Quest.InputObject.WeaponAttributes }


{-|

  - attributes -

-}
addWeapon : (AddWeaponOptionalArguments -> AddWeaponOptionalArguments) -> SelectionSet decodesTo Quest.Object.Weapon -> SelectionSet (Maybe decodesTo) RootMutation
addWeapon fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { attributes = Absent }

        optionalArgs =
            [ Argument.optional "attributes" filledInOptionals.attributes Quest.InputObject.encodeWeaponAttributes ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "addWeapon" optionalArgs object_ (identity >> Decode.nullable)


type alias AddWeaponsOptionalArguments =
    { attributesList : OptionalArgument (List (Maybe Quest.InputObject.WeaponAttributes)) }


{-|

  - attributesList -

-}
addWeapons : (AddWeaponsOptionalArguments -> AddWeaponsOptionalArguments) -> SelectionSet decodesTo Quest.Object.Weapon -> SelectionSet (List decodesTo) RootMutation
addWeapons fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { attributesList = Absent }

        optionalArgs =
            [ Argument.optional "attributesList" filledInOptionals.attributesList (Quest.InputObject.encodeWeaponAttributes |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "addWeapons" optionalArgs object_ (identity >> Decode.list)


type alias UpdateWeaponOptionalArguments =
    { attributes : OptionalArgument Quest.InputObject.WeaponAttributes }


type alias UpdateWeaponRequiredArguments =
    { id : Quest.ScalarCodecs.Id }


{-|

  - id -
  - attributes -

-}
updateWeapon : (UpdateWeaponOptionalArguments -> UpdateWeaponOptionalArguments) -> UpdateWeaponRequiredArguments -> SelectionSet decodesTo Quest.Object.Weapon -> SelectionSet (Maybe decodesTo) RootMutation
updateWeapon fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { attributes = Absent }

        optionalArgs =
            [ Argument.optional "attributes" filledInOptionals.attributes Quest.InputObject.encodeWeaponAttributes ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateWeapon" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Quest.ScalarCodecs.codecs |> Quest.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias DeleteWeaponRequiredArguments =
    { id : Quest.ScalarCodecs.Id }


{-|

  - id -

-}
deleteWeapon : DeleteWeaponRequiredArguments -> SelectionSet decodesTo Quest.Object.Weapon -> SelectionSet (Maybe decodesTo) RootMutation
deleteWeapon requiredArgs object_ =
    Object.selectionForCompositeField "deleteWeapon" [ Argument.required "id" requiredArgs.id (Quest.ScalarCodecs.codecs |> Quest.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


{-| -}
deleteAllWeapons : SelectionSet (Maybe Int) RootMutation
deleteAllWeapons =
    Object.selectionForField "(Maybe Int)" "deleteAllWeapons" [] (Decode.int |> Decode.nullable)

-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quest.Query exposing (ArmorRequiredArguments, FindArmorsOptionalArguments, FindWeaponsOptionalArguments, WeaponRequiredArguments, armor, armors, findArmors, findWeapons, items, weapon, weapons)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Quest.InputObject
import Quest.Interface
import Quest.Object
import Quest.Scalar
import Quest.ScalarCodecs
import Quest.Union


{-| -}
items : SelectionSet decodesTo Quest.Union.Item -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
items object_ =
    Object.selectionForCompositeField "items" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias ArmorRequiredArguments =
    { id : Quest.ScalarCodecs.Id }


{-|

  - id -

-}
armor : ArmorRequiredArguments -> SelectionSet decodesTo Quest.Object.Armor -> SelectionSet (Maybe decodesTo) RootQuery
armor requiredArgs object_ =
    Object.selectionForCompositeField "armor" [ Argument.required "id" requiredArgs.id (Quest.ScalarCodecs.codecs |> Quest.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


{-| -}
armors : SelectionSet decodesTo Quest.Object.Armor -> SelectionSet (List decodesTo) RootQuery
armors object_ =
    Object.selectionForCompositeField "armors" [] object_ (identity >> Decode.list)


type alias FindArmorsOptionalArguments =
    { where_ : OptionalArgument Quest.InputObject.ArmorWhere }


{-|

  - where\_ -

-}
findArmors : (FindArmorsOptionalArguments -> FindArmorsOptionalArguments) -> SelectionSet decodesTo Quest.Object.Armor -> SelectionSet (List decodesTo) RootQuery
findArmors fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Quest.InputObject.encodeArmorWhere ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "findArmors" optionalArgs object_ (identity >> Decode.list)


type alias WeaponRequiredArguments =
    { id : Quest.ScalarCodecs.Id }


{-|

  - id -

-}
weapon : WeaponRequiredArguments -> SelectionSet decodesTo Quest.Object.Weapon -> SelectionSet (Maybe decodesTo) RootQuery
weapon requiredArgs object_ =
    Object.selectionForCompositeField "weapon" [ Argument.required "id" requiredArgs.id (Quest.ScalarCodecs.codecs |> Quest.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


{-| -}
weapons : SelectionSet decodesTo Quest.Object.Weapon -> SelectionSet (List decodesTo) RootQuery
weapons object_ =
    Object.selectionForCompositeField "weapons" [] object_ (identity >> Decode.list)


type alias FindWeaponsOptionalArguments =
    { where_ : OptionalArgument Quest.InputObject.WeaponWhere }


{-|

  - where\_ -

-}
findWeapons : (FindWeaponsOptionalArguments -> FindWeaponsOptionalArguments) -> SelectionSet decodesTo Quest.Object.Weapon -> SelectionSet (List decodesTo) RootQuery
findWeapons fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Quest.InputObject.encodeWeaponWhere ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "findWeapons" optionalArgs object_ (identity >> Decode.list)

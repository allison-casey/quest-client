-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quest.Union.Item exposing (Fragments, fragments, maybeFragments)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import Quest.InputObject
import Quest.Interface
import Quest.Object
import Quest.Scalar
import Quest.ScalarCodecs
import Quest.Union


type alias Fragments decodesTo =
    { onWeapon : SelectionSet decodesTo Quest.Object.Weapon
    , onArmor : SelectionSet decodesTo Quest.Object.Armor
    }


{-| Build up a selection for this Union by passing in a Fragments record.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Quest.Union.Item
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "Weapon" selections.onWeapon
        , Object.buildFragment "Armor" selections.onArmor
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onWeapon = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onArmor = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
